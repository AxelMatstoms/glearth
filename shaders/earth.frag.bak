#version 330 core

#define PI 3.1415926535897932

out vec4 FragColor;

in vec3 worldPos;
in vec3 normal;
in vec3 texCoord;

struct Light {
    vec3 position;
    
    vec3 diffuse;
    vec3 specular;
};

uniform sampler2D daySide;
uniform sampler2D nightSide;
//uniform sampler2D specularMap;
uniform sampler2D roughnessMap;
uniform sampler2D clouds;
uniform mat3 normalMtrx;
uniform float shininess;
uniform vec3 cameraPos;
uniform Light sun;

float fresnel(vec3 normal, vec3 view)
{
    /*
    float n1 = 1.0;
    float n2 = 1.5;
    
    float R0 = (n1 - n2) / (n1 + n2);
    R0 = R0 * R0;
    */
    float R0 = 0.04;

    float f = 1 - dot(normal, view);
    f = f * f * f * f * f;
    float R = R0 + (1 - R0) * f;

    return clamp(R, 0.0, 1.0);
}

float ndf_ggx(float alpha, vec3 normal, vec3 micronormal)
{
    float numerator = alpha * alpha;

    float n_dot_m = dot(normal, micronormal);
    float base = (n_dot_m * n_dot_m) * (alpha * alpha - 1.0) + 1.0;
    float denominator = PI * base * base;

    return numerator / denominator;
}

float g_ggx(float alpha, vec3 normal, vec3 view)
{
    float n_dot_v = dot(normal, view);

    float numerator = 2.0 * n_dot_v;

    float alpha2 = alpha * alpha;
    
    float denominator = n_dot_v + sqrt(alpha2 + (1 - alpha2) * n_dot_v * n_dot_v);
}

float g_ggx_smith(float alpha, vec3 normal, vec3 view, vec3 light)
{
    return g_ggx(alpha, normal, view) * g_ggx(alpha, normal, light);
}

vec3 cook_torrance_brdf(float alpha, vec3 normal, vec3 view, vec3 light)
{
    vec3 half = normalize(view + light);
    return ndf_ggx(alpha, normal, half) * fresnel(normal, view) * g_ggx_smith(alpha, normal, view, light) / (4.0 * dot(normal, light) * dot(normal, view));
}

vec2 sphere_uv(vec3 direction)
{
    float u = 0.5 + atan(direction.z, direction.x) / (2 * PI);
    float v = 0.5 - asin(direction.y) / PI;

    return vec2(1.0 - u, v);
}

void main()
{
    vec3 lightDir = normalize(sun.position - worldPos);
    vec3 nnormal = normalize(normal);

    vec2 uv = sphere_uv(texCoord);
    
    float cos_theta = (dot(nnormal, lightDir) + 0.0) / 1.0;
    vec3 diffuse = vec3(0);
    vec3 cloud = vec3(texture(clouds, uv));
    float cloud_factor = (cloud.x + cloud.y + cloud.z) / 3.0;
    vec3 night = (vec3(texture(nightSide, uv)) - vec3(0.1)) * 1.1;
    vec3 day = vec3(texture(daySide, uv)) * sun.diffuse;
    night = mix(night, cloud * vec3(0.05, 0.05, 0.1), cloud_factor);
    day = mix(day, cloud, cloud_factor);
    vec3 day_diffuse = day * max(cos_theta, 0.0);
    if (cos_theta < 0.0) {
        diffuse = night;
    } else if (cos_theta < 0.1) {
        diffuse = mix(night, day * 0.1 * sun.diffuse, 10.0 * cos_theta);
    } else {
        diffuse = day_diffuse;
    }
    //diffuse = mix(night, day, max(cos_theta, 0.0));

    vec3 viewDir = normalize(cameraPos - worldPos);
    vec3 reflectDir = reflect(-lightDir, nnormal);
    vec3 specularAmount = vec3(texture(specularMap, uv));
    specularAmount = mix(specularAmount, vec3(0), cloud_factor);
    vec3 specular = specularAmount * sun.specular * pow(max(dot(viewDir, reflectDir), 0.0), shininess);

    //FragColor = vec4(diffuse + specular, 1.0);
    FragColor = vec4(mix(diffuse, specular, fresnel(normal, viewDir)), 1.0);
    //FragColor = vec4(normalize(normal) / 2.0 + vec3(0.5), 1.0);
    //FragColor = vec4(1.0, 0.0, 1.0, 1.0);
}
